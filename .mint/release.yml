concurrency-pools:
  - id: rwx-research/mint-cli::release-${{ init.kind }}
    capacity: 1
    on-overflow: cancel-waiting

tasks:
  - key: verify-inputs
    use: []
    run: |
      kind="${{ init.kind }}"
      if [[ $kind != "production" && $kind != "unstable" && $kind != "testing" ]]; then
        echo "Invalid init.kind '${kind}'"
        exit 1
      fi

      echo "${{ init.commit }}" | grep -E '^[0-9a-f]{40}$' || (echo "Sha is not formatted as 40 hex digits" && false)

      if [[ $kind == "production" ]]; then
        echo "${{ init.version }}" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || (echo "Version number is not formatted as vX.X.X" && false)
      fi
  - key: extract-version-details
    use: verify-inputs
    outputs:
      kv-outputs: [full-version, aliased-version]
    run: |
      kind="${{ init.kind }}"

      if [[ $kind == "production" ]]; then
        fullVersion="${{ init.version }}"
        aliasedVersion=$(echo "${{ init.version }}" | sed -E 's/\.[0-9]+\.[0-9]+$//g')
      fi

      if [[ $kind == "unstable" ]]; then
        fullVersion="unstable-${{ init.commit }}"
        aliasedVersion="unstable"
      fi

      if [[ $kind == "testing" ]]; then
        fullVersion="testing-${{ init.commit }}"
        aliasedVersion="_"
      fi

      echo "full-version=$fullVersion" >> "$MINT_KV_OUTPUTS"
      echo "aliased-version=$aliasedVersion" >> "$MINT_KV_OUTPUTS"
  - key: git-clone
    call: mint/checkout
    use: verify-inputs
    with:
      repository: git@github.com:rwx-research/mint-cli.git
      sha: ${{ init.commit }}
      ssh-key: ${{ secrets.CHECKOUT_SSH_KEY_MINT_CLI_REPO }}
  - key: ensure-release-not-published
    use: [git-clone, extract-version-details]
    run: |
      release_not_published=$(gh release view ${{ tasks.extract-version-details.kvOutputs.full-version }} \
        --json isDraft \
        --jq '.isDraft == true' \
      || true)
      if [[ $release_not_published == "false" ]]; then
        echo "Release has already been published"
        exit 1
      fi
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: setup-git-ssh
    use: []
    run: |
      eval "$(ssh-agent -s)"
      mkdir -p ~/.ssh
      echo "${{ secrets.CHECKOUT_SSH_KEY_MINT_CLI_REPO }}" > ~/.ssh/id_ed25519
      chmod 600 ~/.ssh/id_ed25519
      ssh-add ~/.ssh/id_ed25519
  - key: draft-full-version-release
    use: [ensure-release-not-published, setup-git-ssh]
    run: |
      full_version="${{ tasks.extract-version-details.kvOutputs.full-version }}"
      echo "Creating release ${full_version} if it does not exist"
      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      git tag --force "${full_version}"
      git push --force origin "${full_version}"
      gh release view "${full_version}" || \
        gh release create "${full_version}" \
        --draft \
        --prerelease=${{ init.kind != 'production' }} \
        --generate-notes \
        --title "Mint CLI ${full_version}"
      rm -f ~/.ssh/known_hosts
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: setup-nix
    use: git-clone
    run: |
      sh <(curl -L https://nixos.org/nix/install) --no-daemon
      mkdir -p /home/ubuntu/.config/nix
      echo "experimental-features = nix-command flakes" >> /home/ubuntu/.config/nix/nix.conf
      . /home/ubuntu/.nix-profile/etc/profile.d/nix.sh
      nix develop --command echo "Nix installed successfully"
    filter:
      - flake.nix
      - flake.lock
  - key: setup-codesigning
    use: []
    run: |
      curl -fsSLO https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz
      tar xzvf apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz --strip-components=1
  - key: setup-node
    use: git-clone
    filter: [.node-version]
    call: mint/setup-node
    with:
      node-version-file: .node-version
  - key: install-yaml-package
    use: setup-node
    filter: []
    run: npm install yaml@2.3.4
  - key: install-zip
    use: []
    run: |
      sudo apt-get -y update
      sudo apt-get -y install zip

  # These won't work until we enable dependencies between dynamic tasks
  # - key: generate-build-tasks
  #   use: [extract-version-details, install-yaml-package]
  #   filter:
  #     - bin/generate-dynamic-mint-build-tasks.js
  #     - node_modules/*
  #   run: node bin/generate-dynamic-mint-build-tasks.js >> "${MINT_DYNAMIC_TASKS}/tasks.yml"
  #   env:
  #     FULL_VERSION: ${{ tasks.extract-version-details.kvOutputs.full-version }}

  - key: build-mint-linux-amd64
    use: [extract-version-details, setup-nix]
    run: |
      GOOS=linux \
      GOARCH=amd64 \
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.kvOutputs.full-version }}" \
      nix develop --command mage
  - key: upload-linux-amd64-to-release
    use: build-mint-linux-amd64
    run: |
      github_asset_name=$(echo "mint-linux-x86_64" | tr '[:upper:]' '[:lower:]')
      mv "mint" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.kvOutputs.full-version }} "${github_asset_name}" --clobber
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: build-mint-linux-arm64
    use: [extract-version-details, setup-nix]
    run: |
      GOOS=linux \
      GOARCH=arm64 \
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.kvOutputs.full-version }}" \
      nix develop --command mage
  - key: upload-linux-arm64-to-release
    use: build-mint-linux-arm64
    run: |
      github_asset_name=$(echo "mint-linux-aarch64" | tr '[:upper:]' '[:lower:]')
      mv "mint" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.kvOutputs.full-version }} "${github_asset_name}" --clobber
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: build-mint-darwin-amd64
    use: [extract-version-details, setup-nix]
    run: |
      GOOS=darwin \
      GOARCH=amd64 \
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.kvOutputs.full-version }}" \
      nix develop --command mage
  - key: notarize-amd64-binary
    use: [setup-codesigning, install-zip, build-mint-darwin-amd64]
    run: |
      echo "$RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT" > rwx-developer-id-application-cert.pem

      # first we sign the binary. This happens locally.
      ./rcodesign sign --pem-source rwx-developer-id-application-cert.pem --code-signature-flags runtime "./mint"

      # notarizing requires certain container formats, that's why we zip
      zip -r mint.zip "./mint"
      echo "$RWX_APPLE_APP_STORE_CONNECT_API_KEY" > rwx-apple-app-store-connect-api-key.json
      ./rcodesign notary-submit --wait --api-key-path rwx-apple-app-store-connect-api-key.json mint.zip
    env:
      CODESIGN_VERSION: 0.22.0
      RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT: "${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_CERTIFICATE }}${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_PRIVATE_KEY }}"
      RWX_APPLE_APP_STORE_CONNECT_API_KEY: ${{ secrets.RWX_APPLE_APP_STORE_CONNECT_API_KEY }}
  - key: upload-darwin-amd64-to-release
    use: notarize-amd64-binary
    run: |
      github_asset_name=$(echo "mint-darwin-x86_64" | tr '[:upper:]' '[:lower:]')
      mv "mint" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.kvOutputs.full-version }} "${github_asset_name}" --clobber
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: build-mint-darwin-arm64
    use: [extract-version-details, setup-nix]
    run: |
      GOOS=darwin \
      GOARCH=arm64 \
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.kvOutputs.full-version }}" \
      nix develop --command mage
  - key: notarize-arm64-binary
    use: [setup-codesigning, install-zip, build-mint-darwin-arm64]
    run: |
      echo "$RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT" > rwx-developer-id-application-cert.pem

      # first we sign the binary. This happens locally.
      ./rcodesign sign --pem-source rwx-developer-id-application-cert.pem --code-signature-flags runtime "./mint"

      # notarizing requires certain container formats, that's why we zip
      zip -r mint.zip "./mint"
      echo "$RWX_APPLE_APP_STORE_CONNECT_API_KEY" > rwx-apple-app-store-connect-api-key.json
      ./rcodesign notary-submit --wait --api-key-path rwx-apple-app-store-connect-api-key.json mint.zip
    env:
      CODESIGN_VERSION: 0.22.0
      RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT: "${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_CERTIFICATE }}${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_PRIVATE_KEY }}"
      RWX_APPLE_APP_STORE_CONNECT_API_KEY: ${{ secrets.RWX_APPLE_APP_STORE_CONNECT_API_KEY }}
  - key: upload-darwin-arm64-to-release
    use: notarize-arm64-binary
    run: |
      github_asset_name=$(echo "mint-darwin-aarch64" | tr '[:upper:]' '[:lower:]')
      mv "mint" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.kvOutputs.full-version }} "${github_asset_name}" --clobber
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: build-mint-windows-amd64
    use: [extract-version-details, setup-nix]
    run: |
      GOOS=windows \
      GOARCH=amd64 \
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.kvOutputs.full-version }}" \
      nix develop --command mage
  - key: upload-windows-amd64-to-release
    use: build-mint-windows-amd64
    run: |
      github_asset_name=$(echo "mint-windows-x86_64.exe" | tr '[:upper:]' '[:lower:]')
      mv "mint.exe" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.kvOutputs.full-version }} "${github_asset_name}" --clobber
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
  - key: build-mint-windows-arm64
    use: [extract-version-details, setup-nix]
    run: |
      GOOS=windows \
      GOARCH=arm64 \
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.kvOutputs.full-version }}" \
      nix develop --command mage
  - key: upload-windows-arm64-to-release
    use: build-mint-windows-arm64
    run: |
      github_asset_name=$(echo "mint-windows-aarch64.exe" | tr '[:upper:]' '[:lower:]')
      mv "mint.exe" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.kvOutputs.full-version }} "${github_asset_name}" --clobber
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}

  - key: ensure-uploads-succeeded
    use:
      - upload-linux-amd64-to-release
      - upload-linux-arm64-to-release
      - upload-darwin-amd64-to-release
      - upload-darwin-arm64-to-release
      - upload-windows-amd64-to-release
      - upload-windows-arm64-to-release
    run: exit 0

  - key: publish-production-release
    use: [git-clone, extract-version-details, ensure-uploads-succeeded]
    run: |
      if [[ "${{init.kind}}" != "production" ]]; then
        echo "Not production; exiting"
        exit 0
      fi

      gh release edit ${{ tasks.extract-version-details.kvOutputs.full-version }} \
        --draft=false \
        --latest
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}

  - key: update-aliased-version-release
    use: [ensure-release-not-published, setup-git-ssh, ensure-uploads-succeeded]
    run: |
      aliased_version="${{ tasks.extract-version-details.kvOutputs.aliased-version }}"
      if [[ $aliased_version == "_" ]]; then
        echo "No aliased version; exiting"
        exit 0
      fi

      echo "Creating release ${aliased_version} if it does not exist"
      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      git tag --force "${aliased_version}"
      git push --force origin "${aliased_version}"
      gh release view "${aliased_version}" || \
        gh release create "${aliased_version}" \
        --latest=false \
        --draft=${{ init.kind != 'production' && init.kind != 'unstable' }} \
        --prerelease=${{ init.kind != 'production' }} \
        --notes="The Mint CLI ${aliased_version} release and tag exist to provide an easy way to download the latest ${aliased_version}.x.x release of the Mint CLI. For example, you can always download the latest Linux x86 ${aliased_version} release at this URL: https://github.com/rwx-research/mint-cli/releases/download/${aliased_version}/mint-linux-x86_64. (Look at the assets attached to this release to find the other available downloads.) This release and its assets are updated whenever a new ${aliased_version}.x.x version of the Mint CLI is released." \
        --title "Mint CLI ${aliased_version}"

      mkdir ./full_release && cd ./full_release
      gh release download ${{ tasks.extract-version-details.kvOutputs.full-version }}
      gh release upload "${aliased_version}" mint-* --clobber

      rm -f ~/.ssh/known_hosts
    env:
      GH_TOKEN: ${{ secrets.MINT_CLI_REPO_GH_TOKEN }}
