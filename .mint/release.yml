on:
  dispatch:
    - key: release-mint-cli
      title: "Release Mint CLI ${{ init.version }} (${{ init.kind }})"
      params:
        - key: version
          description: "The version to release. If kind is production, this must be in the format vX.X.X"
          required: true
        - key: kind
          description: "The kind of release to perform. Must be one of 'production', 'unstable', or 'testing'"
          default: production
          required: false
      init:
        commit: ${{ event.git.sha }}
        kind: ${{ event.dispatch.params.kind }}
        version: ${{ event.dispatch.params.version }}

concurrency-pools:
  - id: rwx-research/mint-cli::release-${{ init.kind }}
    capacity: 1
    on-overflow: cancel-waiting

base:
  os: ubuntu 24.04
  tag: 1.1

tasks:
  - key: verify-inputs
    run: |
      kind="${{ init.kind }}"
      if [[ $kind != "production" && $kind != "unstable" && $kind != "testing" ]]; then
        echo "Invalid init.kind '${kind}'"
        exit 1
      fi

      echo "${{ init.commit }}" | grep -E '^[0-9a-f]{40}$' || (echo "Sha is not formatted as 40 hex digits" && false)

      if [[ $kind == "production" ]]; then
        echo "${{ init.version }}" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || (echo "Version number is not formatted as vX.X.X" && false)
      fi

  - key: tool-versions
    use: code
    call: mint/tool-versions 1.0.2
    filter:
      - .tool-versions

  - key: go
    call: mint/install-go 1.1.0
    with:
      go-version: ${{ tasks.tool-versions.values.golang }}

  - key: extract-version-details
    after: verify-inputs
    outputs:
      values: [full-version, aliased-version]
    run: |
      kind="${{ init.kind }}"

      if [[ $kind == "production" ]]; then
        fullVersion="${{ init.version }}"
        aliasedVersion=$(echo "${{ init.version }}" | sed -E 's/\.[0-9]+\.[0-9]+$//g')
      fi

      if [[ $kind == "unstable" ]]; then
        fullVersion="unstable-${{ init.commit }}"
        aliasedVersion="unstable"
      fi

      if [[ $kind == "testing" ]]; then
        fullVersion="testing-${{ init.commit }}"
        aliasedVersion="_"
      fi

      printf "$fullVersion" > "$MINT_VALUES/full-version"
      printf "$aliasedVersion" > "$MINT_VALUES/aliased-version"

  - key: code
    call: mint/git-clone 1.5.1
    after: verify-inputs
    with:
      preserve-git-dir: true
      repository: https://github.com/rwx-research/mint-cli.git
      ref: ${{ init.commit }}
      github-access-token: ${{ vaults.default.github-apps.rwx-bot.token }}

  - key: go-deps
    use: [go, code]
    run: go mod download
    filter:
      - go.mod
      - go.sum

  - key: gh-cli
    run: |
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
      && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
      && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
      && sudo apt-get update \
      && sudo apt-get install gh

  - key: ensure-release-not-published
    use: [gh-cli, code]
    run: |
      release_not_published=$(gh release view ${{ tasks.extract-version-details.values.full-version }} \
        --json isDraft \
        --jq '.isDraft == true' \
      || true)
      if [[ $release_not_published == "false" ]]; then
        echo "Release has already been published"
        exit 1
      fi
    env:
      GITHUB_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}

  - key: draft-full-version-release
    use: [gh-cli, code]
    after: [extract-version-details, ensure-release-not-published]
    run: |
      full_version="${{ tasks.extract-version-details.values.full-version }}"
      echo "Creating release ${full_version} if it does not exist"
      git tag --force "${full_version}"
      git push --force origin "${full_version}"
      gh release view "${full_version}" || \
        gh release create "${full_version}" \
        --draft \
        --prerelease=${{ init.kind != 'production' }} \
        --generate-notes \
        --title "Mint CLI ${full_version}"
    env:
      GITHUB_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}

  - key: codesigning
    run: |
      curl -fsSLO https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz
      tar xzvf apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz --strip-components=1

  - key: zip
    run: |
      sudo apt-get update
      sudo apt-get install zip
      sudo apt-get clean

  - key: musl
    run: |
      sudo apt-get update
      sudo apt-get install musl-dev musl-tools
      sudo apt-get clean

  - key: build-and-upload-binaries
    use: [gh-cli, codesigning, zip, musl, code, go-deps]
    after: [draft-full-version-release, extract-version-details]
    parallel:
      key: build-and-upload-${{ parallel.os }}-${{ parallel.arch }}-${{ parallel.link }}-binaries
      values:
        - os: linux
          arch: amd64
          new-arch: x86_64
          test-binary: true
          link: dynamic
        - os: linux
          arch: amd64
          new-arch: x86_64-static
          test-binary: true
          link: static
        - os: linux
          arch: arm64
          new-arch: aarch64
          test-binary: false
          link: dynamic
        - os: darwin
          arch: amd64
          new-arch: x86_64
          test-binary: false
          link: dynamic
        - os: darwin
          arch: arm64
          new-arch: aarch64
          test-binary: false
          link: dynamic
        - os: windows
          arch: amd64
          new-arch: x86_64
          test-binary: false
          link: dynamic
        - os: windows
          arch: arm64
          new-arch: aarch64
          test-binary: false
          link: dynamic
    run: |
      extension=""
      if [[ "${{ parallel.os }}" == "windows" ]]; then
        extension=".exe"
      fi

      ldflags="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=${{ tasks.extract-version-details.values.full-version }}"

      if [[ "${{ parallel.link }}" == "static" ]]; then
        export CC=musl-gcc
        ldflags="${ldflags} -linkmode external -extldflags=-static"
      fi

      GOOS=${{ parallel.os }} \
      GOARCH=${{ parallel.arch }} \
      go build -ldflags "${ldflags}" -a ./cmd/mint

      if [[ ${{ parallel.os }} == "darwin" ]]; then
        echo "$RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT" > rwx-developer-id-application-cert.pem

        # first we sign the binary. This happens locally.
        ./rcodesign sign --pem-source rwx-developer-id-application-cert.pem --code-signature-flags runtime "./mint"

        # notarizing requires certain container formats, that's why we zip
        zip -r mint.zip "./mint"
        echo "$RWX_APPLE_APP_STORE_CONNECT_API_KEY" > rwx-apple-app-store-connect-api-key.json
        ./rcodesign notary-submit --wait --api-key-path rwx-apple-app-store-connect-api-key.json mint.zip
      fi
      if [[ "${{ parallel.test-binary }}" != "false" ]]; then
        ./mint --version | grep '^mint version ${{ tasks.extract-version-details.values.full-version }}'
      fi

      github_asset_name=$(echo "mint-${{ parallel.os }}-${{ parallel.new-arch }}$extension" | tr '[:upper:]' '[:lower:]')
      mv "mint$extension" "$github_asset_name"
      gh release upload ${{ tasks.extract-version-details.values.full-version }} "${github_asset_name}" --clobber
    env:
      GITHUB_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
      CODESIGN_VERSION: 0.22.0
      RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT: "${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_CERTIFICATE }}${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_PRIVATE_KEY }}"
      RWX_APPLE_APP_STORE_CONNECT_API_KEY: ${{ secrets.RWX_APPLE_APP_STORE_CONNECT_API_KEY }}

  - key: publish-production-release
    use: [gh-cli, code]
    after: [extract-version-details, build-and-upload-binaries]
    if: ${{ init.kind == "production" }}
    run: |
      gh release edit ${{ tasks.extract-version-details.values.full-version }} \
        --draft=false \
        --latest
    env:
      GITHUB_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}

  - key: update-aliased-version-release
    use: [gh-cli, code]
    after:
      - extract-version-details
      - ensure-release-not-published
      - build-and-upload-binaries
    if: ${{ tasks.extract-version-details.values.aliased-version != "_" }}
    run: |
      aliased_version="${{ tasks.extract-version-details.values.aliased-version }}"

      echo "Creating release ${aliased_version} if it does not exist"
      git tag --force "${aliased_version}"
      git push --force origin "${aliased_version}"
      gh release view "${aliased_version}" || \
        gh release create "${aliased_version}" \
        --latest=false \
        --draft=${{ init.kind != 'production' && init.kind != 'unstable' }} \
        --prerelease=${{ init.kind != 'production' }} \
        --notes="The Mint CLI ${aliased_version} release and tag exist to provide an easy way to download the latest ${aliased_version}.x.x release of the Mint CLI. For example, you can always download the latest Linux x86 ${aliased_version} release at this URL: https://github.com/rwx-research/mint-cli/releases/download/${aliased_version}/mint-linux-x86_64. (Look at the assets attached to this release to find the other available downloads.) This release and its assets are updated whenever a new ${aliased_version}.x.x version of the Mint CLI is released." \
        --title "Mint CLI ${aliased_version}"

      mkdir ./full_release && cd ./full_release
      gh release download ${{ tasks.extract-version-details.values.full-version }}
      gh release upload "${aliased_version}" mint-* --clobber
    env:
      GITHUB_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
