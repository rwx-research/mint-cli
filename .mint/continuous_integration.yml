on:
  github:
    push:
      - if: ${{ mint.run.git.ref =~ '^refs/heads/.+$' }}
        init:
          branch: ${{ mint.run.git.branch }}
          commit: ${{ event.github.push.head_commit.id }}
      - if: ${{ mint.run.git.ref =~ '^refs/tags/.+$' }}
        init:
          branch: ${{ mint.run.git.tag }} # not entirely correct, but captain in the generated bigtest tasks needs this
          commit: ${{ event.github.push.head_commit.id }}

concurrency-pools:
  - id: rwx-research/mint-cli:${{ init.branch }}
    if: ${{ init.branch != "main" }}
    capacity: 1
    on-overflow: cancel-running

tasks:
  - key: code
    call: mint/git-clone 1.2.0
    with:
      preserve-git-dir: "true"
      repository: git@github.com:rwx-research/mint-cli.git
      ref: ${{ init.commit }}
      ssh-key: ${{ secrets.CHECKOUT_SSH_KEY_MINT_CLI_REPO }}

  - key: go
    call: mint/install-go 1.0.6
    with:
      go-version: 1.22.1

  - key: golangci-lint
    use: go
    run: |
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.57.2

  - key: go-deps
    use: [code, go]
    run: go mod download
    filter:
      - go.mod
      - go.sum

  - key: unit-tests
    use: go-deps
    run: |
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=testing-${{ init.commit }}" \
      go run ./tools/mage test

  - key: build-mint-cli
    use: go-deps
    run: |
      CGO_ENABLED=0 \
        LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=testing-${{ init.commit }}" \
        go run ./tools/mage build

  - key: integration-tests
    use: build-mint-cli
    run: ./mint run --debug -f test/hello-world.mint.yaml
    env:
      RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}

  - key: lint
    use: [golangci-lint, go-deps]
    run: go run ./tools/mage lint

  - key: go-mod-tidy
    use: go-deps
    run: |
      go mod tidy
      git diff --exit-code

  - key: checkout-mint-testing
    call: mint/git-clone 1.2.0
    with:
      path: ./mint-testing
      repository: git@github.com:rwx-research/mint-testing.git
      ref: main
      ssh-key: ${{ secrets.SSH_KEY_MINT_TESTING_REPO }}

  - key: install-jq
    run: |
      sudo apt-get update
      sudo apt-get install jq
      sudo apt-get clean

  - key: run-mint-testing-tests
    use: [checkout-mint-testing, install-jq, build-mint-cli]
    run: |
      initiate_run_result=$(./mint run --json --file ./mint-testing/.mint/trigger-integration-test.yml --init 'grep=@cli' --init ref=main --init cli=${{ init.commit }})
      echo "${initiate_run_result}"
      run_id=$(echo "${initiate_run_result}" | jq -r ".RunId")

      while true; do
        response=$(curl -H "Authorization: Bearer ${RWX_ACCESS_TOKEN}" -s -o response.json --http1.1 -w "%{http_code}" "https://cloud.rwx.com/mint/api/runs/${run_id}")

        if [ "$response" -ne 200 ]; then
          echo "Error: Cloud server returned unexpected status ${response} when polling run"
          exit 1
        fi

        execution_status=$(jq -r .run_status.execution response.json)
        result_status=$(jq -r .run_status.result response.json)

        echo "Execution status: ${execution_status}"
        echo "Result status: ${result_status}"

        case $execution_status in
          "waiting")
            echo "Retrying in 5 seconds..."
            sleep 5
            ;;
          "in_progress")
            echo "Retrying in 5 seconds..."
            sleep 5
            ;;
          "aborted")
            exit 1
            ;;
          "finished")
            case $result_status in
              "failed")
                exit 1
                ;;
              "succeeded")
                exit 0
                ;;
              *)
                exit 1
                ;;
            esac
            ;;
          *)
            exit 1
            ;;
        esac
      done
    env:
      RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
    filter:
      - /mint
      - /mint-testing/.mint/trigger-integration-test.yml
