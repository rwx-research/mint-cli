on:
  github:
    push:
      init:
        branch: ${{ mint.run.git.branch }}
        commit: ${{ event.github.push.head_commit.id }}

concurrency-pools:
  - id: rwx-research/mint-cli:${{ init.branch }}
    if: ${{ init.branch != "main" }}
    capacity: 1
    on-overflow: cancel-running

tasks:
  - key: git-clone
    call: mint/git-clone 1.1.4
    with:
      preserve-git-dir: "true"
      repository: git@github.com:rwx-research/mint-cli.git
      ref: ${{ init.commit }}
      ssh-key: ${{ secrets.CHECKOUT_SSH_KEY_MINT_CLI_REPO }}
  - key: setup-nix
    use: git-clone
    run: |
      sh <(curl -L https://nixos.org/nix/install) --no-daemon
      mkdir -p /home/ubuntu/.config/nix
      echo "experimental-features = nix-command flakes" >> /home/ubuntu/.config/nix/nix.conf
      . /home/ubuntu/.nix-profile/etc/profile.d/nix.sh
      nix develop --command echo "Nix installed successfully"
    filter:
      - flake.nix
      - flake.lock
  - key: download-go-dependencies
    use: setup-nix
    run: nix develop --command go mod download
  - key: unit-tests
    use: download-go-dependencies
    run: |
      CGO_ENABLED=0 \
      LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=testing-${{ init.commit }}" \
      nix develop --command mage test
  - key: build-mint-cli
    use: download-go-dependencies
    run: |
      CGO_ENABLED=0 \
        LDFLAGS="-w -s -X github.com/rwx-research/mint-cli/cmd/mint/config.Version=testing-${{ init.commit }}" \
        nix develop --command mage build
  - key: integration-tests
    use: build-mint-cli
    run: ./mint run --debug -f test/hello-world.mint.yaml
    env:
      RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
  - key: lint-go
    use: download-go-dependencies
    run: nix develop --command mage lint
  - key: lint-nix
    use: setup-nix
    run: nix fmt -- --check flake.nix
  - key: go-mod-tidy
    use: download-go-dependencies
    run: |
      nix develop --command go mod tidy
      git diff --exit-code
  - key: kickoff-unstable-release-on-main
    use: build-mint-cli
    after: [unit-tests, integration-tests]
    if: ${{ init.branch == "main" }}
    run: |
      ./mint run -f .mint/release.yml \
        --init "kind=unstable" \
        --init "commit=${{ init.commit }}" \
        --init "version=UNSTABLE"
    env:
      RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
  - key: checkout-mint-testing
    call: mint/git-clone 1.1.4
    with:
      path: ./mint-testing
      repository: git@github.com:rwx-research/mint-testing.git
      ref: main
      ssh-key: ${{ secrets.SSH_KEY_MINT_TESTING_REPO }}
  - key: install-jq
    run: |
      sudo apt-get update
      sudo apt-get install jq
      sudo apt-get clean
  - key: run-mint-testing-tests
    use: [checkout-mint-testing, install-jq, build-mint-cli]
    run: |
      initiate_run_result=$(./mint run --json --file ./mint-testing/.mint/trigger-integration-test.yml --init 'grep=@cli' --init ref=main --init cli=${{ init.commit }})
      echo "${initiate_run_result}"
      run_id=$(echo "${initiate_run_result}" | jq -r ".RunId")

      while true; do
        response=$(curl -H "Authorization: Bearer ${RWX_ACCESS_TOKEN}" -s -o response.json --http1.1 -w "%{http_code}" "https://cloud.rwx.com/mint/api/runs/${run_id}")

        if [ "$response" -ne 200 ]; then
          echo "Error: Cloud server returned unexpected status ${response} when polling run"
          exit 1
        fi

        execution_status=$(jq -r .run_status.execution response.json)
        result_status=$(jq -r .run_status.result response.json)

        echo "Execution status: ${execution_status}"
        echo "Result status: ${result_status}"

        case $execution_status in
          "waiting")
            echo "Retrying in 5 seconds..."
            sleep 5
            ;;
          "in_progress")
            echo "Retrying in 5 seconds..."
            sleep 5
            ;;
          "aborted")
            exit 1
            ;;
          "finished")
            case $result_status in
              "failed")
                exit 1
                ;;
              "succeeded")
                exit 0
                ;;
              *)
                exit 1
                ;;
            esac
            ;;
          *)
            exit 1
            ;;
        esac
      done
    env:
      RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
    filter:
      - /mint
      - /mint-testing/.mint/trigger-integration-test.yml
